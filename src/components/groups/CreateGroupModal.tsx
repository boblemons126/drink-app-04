
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/use-auth';

interface CreateGroupModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSuccess: () => void;
}

const CreateGroupModal: React.FC<CreateGroupModalProps> = ({ open, onOpenChange, onSuccess }) => {
  const [groupName, setGroupName] = useState('');
  const [groupEmoji, setGroupEmoji] = useState('üçª');
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();
  const { user } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!groupName.trim() || !user) return;

    setLoading(true);
    try {
      // The invite_code will be auto-generated by the database trigger
      const { error } = await supabase
        .from('groups')
        .insert({
          name: groupName.trim(),
          emoji: groupEmoji,
          created_by: user.id,
          invite_code: '' // This will be replaced by the database trigger
        });

      if (error) throw error;

      toast({
        title: "Group Created!",
        description: `${groupEmoji} ${groupName} has been created successfully.`
      });

      setGroupName('');
      setGroupEmoji('üçª');
      onSuccess();
      onOpenChange(false);
    } catch (error: any) {
      console.error('Error creating group:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to create group. Please try again.",
        variant: "destructive"
      });
    }
    setLoading(false);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="bg-black/90 backdrop-blur-xl border-white/20 text-white">
        <DialogHeader>
          <DialogTitle className="text-xl font-bold text-center">Create New Group</DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="groupName">Group Name</Label>
            <Input
              id="groupName"
              type="text"
              placeholder="Weekend Crew"
              value={groupName}
              onChange={(e) => setGroupName(e.target.value)}
              className="bg-white/10 border-white/20 text-white placeholder-slate-400"
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="groupEmoji">Group Emoji</Label>
            <div className="flex gap-2">
              {['üçª', 'üç∑', 'ü•É', 'üç∏', 'üçπ', 'üéâ', 'üéä', 'üî•'].map((emoji) => (
                <button
                  key={emoji}
                  type="button"
                  onClick={() => setGroupEmoji(emoji)}
                  className={`p-2 rounded-lg text-xl transition-colors ${
                    groupEmoji === emoji
                      ? 'bg-purple-600 ring-2 ring-purple-400'
                      : 'bg-white/10 hover:bg-white/20'
                  }`}
                >
                  {emoji}
                </button>
              ))}
            </div>
          </div>

          <div className="flex gap-2 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={() => onOpenChange(false)}
              className="flex-1 bg-white/10 border-white/20 text-white hover:bg-white/20"
            >
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={loading || !groupName.trim()}
              className="flex-1 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
            >
              {loading ? "Creating..." : "Create Group"}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default CreateGroupModal;
